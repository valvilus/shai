'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { useRouter } from 'next/navigation';
import { motion } from 'framer-motion';
import {
  MagnifyingGlassIcon,
  AdjustmentsHorizontalIcon,
  CalendarDaysIcon,
  PhoneIcon,
  EyeIcon,
  EllipsisVerticalIcon,
  XMarkIcon,
  ChartBarIcon,
  DocumentTextIcon,
  UserGroupIcon,
  Cog6ToothIcon,
  ArrowDownTrayIcon,
  PlusCircleIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  BellIcon,
  ChevronDownIcon,
  FunnelIcon,
  EyeSlashIcon,
  PlusIcon,
  EllipsisHorizontalIcon,
} from '@heroicons/react/24/outline';
import { format, parseISO } from 'date-fns';
import { ru } from 'date-fns/locale';
import { mockExtendedCallsData, mockManagers, ExtendedCallRecord } from '@/mocks/extended-calls.mock';
import { useLocalStorage } from '@/hooks/useLocalStorage';

// Импортируем рефакторенные компоненты
import EnhancedMinimalLayout from '@/components/layout/EnhancedMinimalLayout';
import CallDetailsModal from '@/components/calls/CallDetailsModal';
import CallStatusBadge from '@/components/calls/CallStatusBadge';
import ResizableColumnHeader from '@/components/table/ResizableColumnHeader';
import { FilterState, TableColumn } from '@/lib/calls/types';
import { ALL_TABLE_COLUMNS } from '@/lib/calls/tableConfig';

// Компактные Dropdown компоненты
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [mounted, setMounted] = useState(false);
  const router = useRouter();

  useEffect(() => {
    setMounted(true);
  }, []);

  const navigationItems = [
    {
      icon: PhoneIcon,
      label: 'Звонки',
      href: '/calls',
      description: 'Все записи звонков',
      active: true,
    },
    {
      icon: ChartBarIcon,
      label: 'Дашборд',
      href: '/dashboard',
      description: 'Общая аналитика',
      active: false,
    },
    {
      icon: DocumentTextIcon,
      label: 'Аналитика',
      href: '/analytics',
      description: 'Подробная аналитика',
      active: false,
    },
    {
      icon: UserGroupIcon,
      label: 'Отчеты',
      href: '/reports',
      description: 'Отчеты и экспорт',
      active: false,
    },
  ];

  const handleNavigation = (href: string) => {
    router.push(href);
    setSidebarOpen(false);
  };

  if (!mounted) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Enhanced Sidebar - с поддержкой сворачивания */}
      <aside
        className={`fixed inset-y-0 left-0 z-50 bg-white border-r border-gray-100 transform transition-all duration-300 ease-in-out lg:translate-x-0 flex flex-col ${
          sidebarOpen ? 'translate-x-0' : '-translate-x-full'
        } ${
          sidebarCollapsed ? 'w-16' : 'w-80'
        }`}
      >
        {/* Logo Section - адаптивная */}
        <div className={`flex items-center h-20 border-b border-gray-100 transition-all duration-300 ${
          sidebarCollapsed ? 'px-3 justify-center' : 'px-8'
        }`}>
          <div className="flex items-center space-x-4">
            <div className="w-10 h-10 bg-gray-900 rounded-xl flex items-center justify-center">
              <span className="text-white font-bold text-base">CA</span>
            </div>
            {!sidebarCollapsed && (
              <div>
                <h1 className="text-xl font-bold text-gray-900">Call Analytics</h1>
                <p className="text-sm text-gray-500">153 members</p>
              </div>
            )}
          </div>
        </div>

        {/* Search - адаптивный */}
        {!sidebarCollapsed && (
          <div className="p-6">
            <div className="relative">
              <MagnifyingGlassIcon className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
              <input
                type="text"
                placeholder="Найти что-то..."
                className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-transparent text-sm bg-gray-50"
              />
            </div>
          </div>
        )}
        
        {sidebarCollapsed && (
          <div className="p-3 flex justify-center">
            <button className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors" title="Поиск">
              <MagnifyingGlassIcon className="h-5 w-5" />
            </button>
          </div>
        )}

        {/* Navigation - адаптивная */}
        <nav className={`flex-1 space-y-1 transition-all duration-300 ${
          sidebarCollapsed ? 'px-2' : 'px-6'
        }`}>
          {!sidebarCollapsed && (
            <div className="text-xs font-semibold text-gray-400 uppercase tracking-wide mb-3 px-3">
              МЕНЮ
            </div>
          )}
          {navigationItems.map((item, index) => (
            <button
              key={index}
              onClick={() => handleNavigation(item.href)}
              className={`w-full flex items-center rounded-lg text-sm font-medium transition-all duration-200 relative ${
                sidebarCollapsed 
                  ? 'justify-center p-3' 
                  : 'space-x-3 px-4 py-2.5'
              } ${
                item.active
                  ? 'bg-gray-100 text-gray-900'
                  : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
              }`}
              title={sidebarCollapsed ? item.label : undefined}
            >
              {item.active && !sidebarCollapsed && (
                <div className="absolute left-0 top-0 bottom-0 w-1 bg-gray-900 rounded-r-full"></div>
              )}
              <item.icon className="h-5 w-5" />
              {!sidebarCollapsed && (
                <span className="text-sm">{item.label}</span>
              )}
            </button>
          ))}
        </nav>

        {/* User Section - адаптивная */}
        <div className={`border-t border-gray-100 transition-all duration-300 mt-auto ${
          sidebarCollapsed ? 'p-3' : 'p-6'
        }`}>
          <div className={`flex items-center ${
            sidebarCollapsed ? 'justify-center' : 'space-x-3'
          }`}>
            <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center text-xs font-semibold text-gray-700" title={sidebarCollapsed ? mockManagers[0].name : undefined}>
              {mockManagers[0].avatar}
            </div>
            {!sidebarCollapsed && (
              <div>
                <div className="text-sm font-medium text-gray-900">{mockManagers[0].name}</div>
                <div className="text-xs text-gray-500">{mockManagers[0].email}</div>
              </div>
            )}
          </div>
        </div>
      </aside>

      {/* Main Content Container - Высота на весь экран */}
      <div className={`flex-1 flex flex-col h-screen overflow-hidden transition-all duration-300 ${
        sidebarCollapsed ? 'lg:ml-16' : 'lg:ml-80'
      }`}>
        {/* Enhanced Header - увеличенная высота */}
        <header className="bg-white border-b border-gray-100">
          <div className="flex items-center justify-between h-24 px-8">
            <div className="flex items-center space-x-6">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="lg:hidden p-2 rounded-md text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors"
              >
                {sidebarOpen ? <XMarkIcon className="h-6 w-6" /> : <Bars3Icon className="h-6 w-6" />}
              </button>
              
              {/* Desktop sidebar toggle */}
              <button
                type="button"
                className="hidden lg:flex text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-gray-500 p-2 rounded-lg transition-colors"
                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                title={sidebarCollapsed ? 'Развернуть sidebar' : 'Свернуть sidebar'}
              >
                <span className="sr-only">{sidebarCollapsed ? 'Expand' : 'Collapse'} sidebar</span>
                {sidebarCollapsed ? (
                  <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6A2.25 2.25 0 016 3.75h2.25A2.25 2.25 0 0110.5 6v2.25a2.25 2.25 0 01-2.25 2.25H6a2.25 2.25 0 01-2.25-2.25V6zM3.75 15.75A2.25 2.25 0 016 13.5h2.25a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 18v-2.25zM13.5 6a2.25 2.25 0 012.25-2.25H18A2.25 2.25 0 0120.25 6v2.25A2.25 2.25 0 0118 10.5h-2.25a2.25 2.25 0 01-2.25-2.25V6zM13.5 15.75a2.25 2.25 0 012.25-2.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-2.25A2.25 2.25 0 0113.5 18v-2.25z" />
                  </svg>
                ) : (
                  <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M3.75 9h16.5m-16.5 6.75h16.5" />
                  </svg>
                )}
              </button>
              
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Звонки</h1>
                <p className="text-sm text-gray-500 mt-1">Последнее обновление несколько минут назад</p>
              </div>
            </div>

            <div className="flex items-center space-x-4">
              <button className="p-3 rounded-xl text-gray-600 hover:bg-gray-100 hover:text-gray-900 transition-colors">
                <BellIcon className="h-6 w-6" />
              </button>
              <button className="inline-flex items-center px-5 py-3 border border-gray-300 rounded-xl text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                <ArrowDownTrayIcon className="h-5 w-5 mr-3" />
                Скачать
              </button>
              <button className="inline-flex items-center px-6 py-3 border border-transparent text-sm font-medium rounded-xl text-white bg-gray-900 hover:bg-gray-800 transition-colors">
                <PlusCircleIcon className="h-5 w-5 mr-3" />
                Создать анализ звонка
              </button>
            </div>
          </div>
        </header>

        {/* Page Content */}
        <main className="flex-1 p-8 bg-gray-50 overflow-auto">{children}</main>

        {/* Mobile Overlay */}
        {sidebarOpen && (
          <div
            className="fixed inset-0 z-40 bg-gray-900/20 backdrop-blur-sm lg:hidden"
            onClick={() => setSidebarOpen(false)}
          />
        )}
      </div>
    </div>
  );
};

// Интерфейс для фильтров
interface FilterState {
  dateRange: string;
  status: string;
  clientWarmth: string;
  callType: string;
  cqrScoreRange: [number, number];
  competitorsMentioned: string;
  communicationIssues: string[];
  questionsCount: string;
  objectionsCount: string;
  successProbability: string;
  priority: string;
}

// Интерфейс для управления колонками
interface TableColumn {
  key: string;
  label: string;
  visible: boolean;
  sortable?: boolean;
  width?: number;
  minWidth?: number;
  maxWidth?: number;
  category: 'basic' | 'cqr' | 'analysis' | 'metrics' | 'communication';
}

// Все возможные колонки таблицы с компактными размерами
const ALL_TABLE_COLUMNS: TableColumn[] = [
  // Основные данные
  { key: 'call_id', label: 'ID', visible: true, sortable: true, width: 40, minWidth: 35, maxWidth: 80, category: 'basic' },
  { key: 'manager', label: 'Менеджер', visible: true, sortable: true, width: 140, minWidth: 60, maxWidth: 200, category: 'basic' },
  { key: 'client', label: 'Клиент', visible: true, sortable: true, width: 160, minWidth: 80, maxWidth: 250, category: 'basic' },
  { key: 'date', label: 'Дата', visible: true, sortable: true, width: 55, minWidth: 45, maxWidth: 90, category: 'basic' },
  { key: 'duration', label: 'Время', visible: true, sortable: true, width: 40, minWidth: 35, maxWidth: 80, category: 'basic' },
  { key: 'status', label: 'Статус', visible: true, sortable: true, width: 60, minWidth: 45, maxWidth: 100, category: 'basic' },
  
  // CQR оценки
  { key: 'cqr_total', label: 'CQR Общий', visible: true, sortable: true, width: 80, minWidth: 60, maxWidth: 120, category: 'cqr' },
  { key: 'cqr_greeting', label: 'Приветствие', visible: true, sortable: true, width: 90, minWidth: 70, maxWidth: 130, category: 'cqr' },
  { key: 'cqr_speech', label: 'Качество речи', visible: true, sortable: true, width: 100, minWidth: 80, maxWidth: 150, category: 'cqr' },
  { key: 'cqr_initiative', label: 'Инициатива', visible: true, sortable: true, width: 90, minWidth: 70, maxWidth: 130, category: 'cqr' },
  { key: 'cqr_programming', label: 'Программирование', visible: true, sortable: true, width: 110, minWidth: 90, maxWidth: 160, category: 'cqr' },
  { key: 'cqr_qualification', label: 'Квалификация', visible: true, sortable: true, width: 100, minWidth: 80, maxWidth: 150, category: 'cqr' },
  { key: 'cqr_product', label: 'Продукт', visible: false, sortable: true, width: 80, minWidth: 60, maxWidth: 120, category: 'cqr' },
  { key: 'cqr_problem', label: 'Проблема', visible: false, sortable: true, width: 90, minWidth: 70, maxWidth: 130, category: 'cqr' },
  { key: 'cqr_press', label: 'Давление', visible: false, sortable: true, width: 80, minWidth: 60, maxWidth: 120, category: 'cqr' },
  { key: 'cqr_next_step', label: 'След. шаг', visible: false, sortable: true, width: 90, minWidth: 70, maxWidth: 130, category: 'cqr' },
  
  // Анализы
  { key: 'client_warmth', label: 'Теплота клиента', visible: true, sortable: true, width: 110, minWidth: 80, maxWidth: 150, category: 'analysis' },
  { key: 'call_type', label: 'Тип звонка', visible: true, sortable: true, width: 130, minWidth: 100, maxWidth: 180, category: 'analysis' },
  { key: 'competitors', label: 'Конкуренты', visible: false, sortable: true, width: 90, minWidth: 70, maxWidth: 130, category: 'analysis' },
  { key: 'questions_count', label: 'Кол-во вопросов', visible: false, sortable: true, width: 100, minWidth: 80, maxWidth: 140, category: 'analysis' },
  { key: 'objections_count', label: 'Кол-во возражений', visible: false, sortable: true, width: 110, minWidth: 90, maxWidth: 160, category: 'analysis' },
  { key: 'pains_count', label: 'Кол-во болей', visible: false, sortable: true, width: 100, minWidth: 80, maxWidth: 140, category: 'analysis' },
  { key: 'products_count', label: 'Кол-во продуктов', visible: false, sortable: true, width: 110, minWidth: 90, maxWidth: 150, category: 'analysis' },
  { key: 'success_probability', label: 'Вероятность успеха', visible: false, sortable: true, width: 120, minWidth: 100, maxWidth: 170, category: 'analysis' },
  { key: 'priority', label: 'Приоритет', visible: false, sortable: true, width: 90, minWidth: 70, maxWidth: 130, category: 'analysis' },
  
  // Качественные метрики
  { key: 'questions_quality', label: 'Качество ответов', visible: false, sortable: true, width: 120, minWidth: 100, maxWidth: 170, category: 'metrics' },
  { key: 'objections_quality', label: 'Качество возражений', visible: false, sortable: true, width: 130, minWidth: 110, maxWidth: 180, category: 'metrics' },
  
  // Стандарты коммуникации
  { key: 'obscenities', label: 'Мат', visible: false, sortable: true, width: 60, minWidth: 50, maxWidth: 90, category: 'communication' },
  { key: 'first_name_basis', label: 'Обращение на "ты"', visible: false, sortable: true, width: 110, minWidth: 90, maxWidth: 150, category: 'communication' },
  { key: 'jokes', label: 'Шутки', visible: false, sortable: true, width: 70, minWidth: 60, maxWidth: 110, category: 'communication' },
];

// Компактные Dropdown компоненты
const EnhancedDropdown = ({ 
  value, 
  onChange, 
  options, 
  placeholder, 
  icon: Icon 
}: {
  value: string;
  onChange: (value: string) => void;
  options: { value: string; label: string }[];
  placeholder: string;
  icon?: React.ComponentType<{ className?: string }>;
}) => {
  return (
    <div className="relative w-auto min-w-40">
      <select
        className="appearance-none w-full px-3 py-3 pl-10 pr-8 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-transparent bg-white text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-50 transition-colors"
        value={value}
        onChange={(e) => onChange(e.target.value)}
      >
        <option value="all">{placeholder}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
      {Icon && (
        <Icon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
      )}
      <ChevronDownIcon className="absolute right-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
    </div>
  );
};

// Продвинутая панель фильтров
const AdvancedFiltersPanel = ({ 
  isOpen, 
  onClose, 
  filters, 
  onFiltersChange 
}: {
  isOpen: boolean;
  onClose: () => void;
  filters: FilterState;
  onFiltersChange: (filters: FilterState) => void;
}) => {
  if (!isOpen) return null;

  const updateFilter = (key: keyof FilterState, value: any) => {
    onFiltersChange({ ...filters, [key]: value });
  };

  const toggleCommunicationIssue = (issue: string) => {
    const current = filters.communicationIssues;
    const updated = current.includes(issue)
      ? current.filter(i => i !== issue)
      : [...current, issue];
    updateFilter('communicationIssues', updated);
  };

  const resetFilters = () => {
    onFiltersChange({
      dateRange: 'all',
      status: 'all',
      clientWarmth: 'all',
      callType: 'all',
      cqrScoreRange: [0, 100],
      competitorsMentioned: 'all',
      communicationIssues: [],
      questionsCount: 'all',
      objectionsCount: 'all',
      successProbability: 'all',
      priority: 'all',
    });
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-xl shadow-lg z-50 p-6"
    >
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-900">Продвинутые фильтры</h3>
        <div className="flex items-center space-x-3">
          <button
            onClick={resetFilters}
            className="text-sm text-gray-500 hover:text-gray-700 transition-colors"
          >
            Сбросить все
          </button>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <XMarkIcon className="h-5 w-5 text-gray-400" />
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {/* Теплота клиента */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Теплота клиента
          </label>
          <select
            value={filters.clientWarmth}
            onChange={(e) => updateFilter('clientWarmth', e.target.value)}
            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900"
          >
            <option value="all">Все</option>
            <option value="холодный">Холодный</option>
            <option value="теплый">Теплый</option>
            <option value="горячий">Горячий</option>
          </select>
        </div>

        {/* Тип звонка */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Тип звонка
          </label>
          <select
            value={filters.callType}
            onChange={(e) => updateFilter('callType', e.target.value)}
            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900"
          >
            <option value="all">Все типы</option>
            <option value="входящий">Входящий</option>
            <option value="исходящий">Исходящий</option>
            <option value="холодный">Холодный контакт</option>
            <option value="теплый">Теплый лид</option>
            <option value="существующий">Существующий клиент</option>
            <option value="партнер">Партнер</option>
            <option value="VIP">VIP клиент</option>
          </select>
        </div>

        {/* CQR балл */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            CQR балл (%)
          </label>
          <div className="flex items-center space-x-2">
            <input
              type="number"
              min="0"
              max="100"
              value={filters.cqrScoreRange[0]}
              onChange={(e) => updateFilter('cqrScoreRange', [parseInt(e.target.value) || 0, filters.cqrScoreRange[1]])}
              className="w-16 px-2 py-1 border border-gray-200 rounded text-sm"
              placeholder="От"
            />
            <span className="text-gray-400">-</span>
            <input
              type="number"
              min="0"
              max="100"
              value={filters.cqrScoreRange[1]}
              onChange={(e) => updateFilter('cqrScoreRange', [filters.cqrScoreRange[0], parseInt(e.target.value) || 100])}
              className="w-16 px-2 py-1 border border-gray-200 rounded text-sm"
              placeholder="До"
            />
          </div>
        </div>

        {/* Конкуренты */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Упоминание конкурентов
          </label>
          <select
            value={filters.competitorsMentioned}
            onChange={(e) => updateFilter('competitorsMentioned', e.target.value)}
            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900"
          >
            <option value="all">Неважно</option>
            <option value="да">Да</option>
            <option value="нет">Нет</option>
          </select>
        </div>

        {/* Количество вопросов */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Количество вопросов
          </label>
          <select
            value={filters.questionsCount}
            onChange={(e) => updateFilter('questionsCount', e.target.value)}
            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900"
          >
            <option value="all">Любое</option>
            <option value="0">0 вопросов</option>
            <option value="1-2">1-2 вопроса</option>
            <option value="3-5">3-5 вопросов</option>
            <option value="6+">6+ вопросов</option>
          </select>
        </div>

        {/* Количество возражений */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Количество возражений
          </label>
          <select
            value={filters.objectionsCount}
            onChange={(e) => updateFilter('objectionsCount', e.target.value)}
            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900"
          >
            <option value="all">Любое</option>
            <option value="0">0 возражений</option>
            <option value="1-2">1-2 возражения</option>
            <option value="3-5">3-5 возражений</option>
            <option value="6+">6+ возражений</option>
          </select>
        </div>

        {/* Вероятность успеха */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Вероятность успеха
          </label>
          <select
            value={filters.successProbability}
            onChange={(e) => updateFilter('successProbability', e.target.value)}
            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900"
          >
            <option value="all">Любая</option>
            <option value="low">Низкая (0-30%)</option>
            <option value="medium">Средняя (31-60%)</option>
            <option value="high">Высокая (61-85%)</option>
            <option value="very-high">Очень высокая (86-100%)</option>
          </select>
        </div>

        {/* Приоритет */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Приоритет действий
          </label>
          <select
            value={filters.priority}
            onChange={(e) => updateFilter('priority', e.target.value)}
            className="w-full px-3 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-900"
          >
            <option value="all">Любой</option>
            <option value="Низкий">Низкий</option>
            <option value="Средний">Средний</option>
            <option value="Высокий">Высокий</option>
            <option value="Очень высокий">Очень высокий</option>
          </select>
        </div>
      </div>

      {/* Проблемы коммуникации */}
      <div className="mt-6">
        <label className="block text-sm font-medium text-gray-700 mb-3">
          Проблемы коммуникации
        </label>
        <div className="flex flex-wrap gap-2">
          {[
            { key: 'obscenities', label: 'Использование мата' },
            { key: 'first_name_basis', label: 'Обращение на "ты"' },
            { key: 'jokes', label: 'Неуместные шутки' },
          ].map((issue) => (
            <button
              key={issue.key}
              onClick={() => toggleCommunicationIssue(issue.key)}
              className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-colors ${
                filters.communicationIssues.includes(issue.key)
                  ? 'bg-red-100 text-red-700 border border-red-200'
                  : 'bg-gray-100 text-gray-600 border border-gray-200 hover:bg-gray-200'
              }`}
            >
              {issue.label}
            </button>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

// Компонент управления колонками
const ColumnControlPanel = ({ 
  isOpen, 
  onClose, 
  columns, 
  onColumnsChange 
}: {
  isOpen: boolean;
  onClose: () => void;
  columns: TableColumn[];
  onColumnsChange: (columns: TableColumn[]) => void;
}) => {
  if (!isOpen) return null;

  const categories = {
    basic: 'Основные данные',
    cqr: 'CQR оценки',
    analysis: 'Анализы',
    metrics: 'Качественные метрики',
    communication: 'Стандарты коммуникации'
  };

  const toggleColumn = (key: string) => {
    const updatedColumns = columns.map(col =>
      col.key === key ? { ...col, visible: !col.visible } : col
    );
    onColumnsChange(updatedColumns);
  };

  const toggleCategory = (category: keyof typeof categories) => {
    const categoryColumns = columns.filter(col => col.category === category);
    const allVisible = categoryColumns.every(col => col.visible);
    
    const updatedColumns = columns.map(col =>
      col.category === category ? { ...col, visible: !allVisible } : col
    );
    onColumnsChange(updatedColumns);
  };

  const resetColumns = () => {
    onColumnsChange(ALL_TABLE_COLUMNS);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-xl shadow-lg z-50 p-6"
    >
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-900">Настройка колонок</h3>
        <div className="flex items-center space-x-3">
          <button
            onClick={resetColumns}
            className="text-sm text-gray-500 hover:text-gray-700 transition-colors"
          >
            Сбросить
          </button>
          <button
            onClick={onClose}
            className="p-1 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <XMarkIcon className="h-5 w-5 text-gray-400" />
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {Object.entries(categories).map(([categoryKey, categoryLabel]) => {
          const categoryColumns = columns.filter(col => col.category === categoryKey);
          const visibleCount = categoryColumns.filter(col => col.visible).length;

          return (
            <div key={categoryKey} className="space-y-3">
              <div className="flex items-center justify-between">
                <h4 className="text-sm font-medium text-gray-700">{categoryLabel}</h4>
                <button
                  onClick={() => toggleCategory(categoryKey as keyof typeof categories)}
                  className="text-xs text-gray-500 hover:text-gray-700 transition-colors"
                >
                  {visibleCount === categoryColumns.length ? 'Скрыть все' : 'Показать все'}
                </button>
              </div>
              
              <div className="space-y-2 max-h-48 overflow-y-auto">
                {categoryColumns.map(column => (
                  <label
                    key={column.key}
                    className="flex items-center space-x-3 cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors"
                  >
                    <input
                      type="checkbox"
                      checked={column.visible}
                      onChange={() => toggleColumn(column.key)}
                      className="w-4 h-4 text-gray-900 border-gray-300 rounded focus:ring-gray-900 focus:ring-2"
                    />
                    <span className="text-sm text-gray-700 flex-1">{column.label}</span>
                    {column.visible ? (
                      <EyeIcon className="h-4 w-4 text-green-500" />
                    ) : (
                      <EyeSlashIcon className="h-4 w-4 text-gray-400" />
                    )}
                  </label>
                ))}
              </div>
            </div>
          );
        })}
      </div>

      <div className="mt-6 pt-4 border-t border-gray-200">
        <div className="text-sm text-gray-500">
          Отображается {columns.filter(col => col.visible).length} из {columns.length} колонок
        </div>
      </div>
    </motion.div>
  );
};

const CallStatusBadge = ({ status }: { status: string }) => {
  let colorClass = '';
  
  switch (status) {
    case 'Завершено':
      colorClass = 'inline-flex items-center gap-2 px-3 py-2 rounded-full text-xs font-medium bg-green-50 text-green-700 border border-green-200';
      break;
    case 'Возврат':
      colorClass = 'inline-flex items-center gap-2 px-3 py-2 rounded-full text-xs font-medium bg-yellow-50 text-yellow-700 border border-yellow-200';
      break;
    case 'Отменено':
      colorClass = 'inline-flex items-center gap-2 px-3 py-2 rounded-full text-xs font-medium bg-red-50 text-red-700 border border-red-200';
      break;
    default:
      colorClass = 'inline-flex items-center gap-2 px-3 py-2 rounded-full text-xs font-medium bg-gray-50 text-gray-700 border border-gray-200';
  }

  return (
    <span className={colorClass}>
      <div className="w-2 h-2 rounded-full bg-current"></div>
      {status}
    </span>
  );
};

// Компонент заголовка колонки с изменением размера
const ResizableColumnHeader = ({ 
  column, 
  onResize 
}: { 
  column: TableColumn; 
  onResize: (key: string, width: number) => void; 
}) => {
  const { width, isResizing, handleMouseDown } = useColumnResize({
    initialWidth: column.width || 80,
    minWidth: column.minWidth || 30,
    maxWidth: column.maxWidth || 500,
    onResize: (newWidth) => onResize(column.key, newWidth)
  });

  return (
    <th
      key={column.key}
      className="group relative px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wide border-r border-gray-200 last:border-r-0 bg-gray-50 select-none"
      style={{ width: `${width}px` }}
    >
      <div className="flex items-center justify-between pr-1">
        <span className="truncate">{column.label}</span>
      </div>
      <ResizeHandle onMouseDown={handleMouseDown} isResizing={isResizing} />
    </th>
  );
};

// Компонент модального окна с деталями звонка
const CallDetailsModal = ({ 
  call, 
  isOpen, 
  onClose 
}: { 
  call: ExtendedCallRecord | null; 
  isOpen: boolean; 
  onClose: () => void; 
}) => {
  if (!isOpen || !call) return null;

  const formatDate = (dateString: string) => {
    try {
      return format(parseISO(dateString), 'dd.MM.yyyy HH:mm', { locale: ru });
    } catch {
      return dateString;
    }
  };

  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}ч ${mins}м`;
    }
    return `${mins}м`;
  };

  return (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center p-4 backdrop-blur-sm">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 backdrop-blur-sm bg-white/20"
        onClick={onClose}
      />

      {/* Modal Content */}
      <div className="relative w-full max-w-5xl max-h-[90vh] bg-white rounded-xl shadow-2xl overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50">
          <div>
            <h2 className="text-xl font-bold text-gray-900">
              Детали звонка {call.call_id}
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              {formatDate(call.date)} • Длительность: {formatDuration(call.duration_minutes)}
            </p>
          </div>
          <button
            onClick={onClose}
            className="p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-200 rounded-lg transition-colors"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>

        {/* Scrollable Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            
            {/* Левая колонка - Основная информация */}
            <div className="space-y-6">
              {/* Основная информация */}
              <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <PhoneIcon className="h-5 w-5 mr-2 text-blue-600" />
                  Основная информация
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">ID звонка:</span>
                    <span className="font-medium text-gray-900">{call.call_id}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Дата и время:</span>
                    <span className="font-medium text-gray-900">{formatDate(call.date)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Длительность:</span>
                    <span className="font-medium text-gray-900">{formatDuration(call.duration_minutes)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Статус:</span>
                    <CallStatusBadge status={call.status} />
                  </div>
                </div>
              </div>

              {/* Информация о менеджере */}
              <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <UserGroupIcon className="h-5 w-5 mr-2 text-green-600" />
                  Менеджер
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Имя:</span>
                    <span className="font-medium text-gray-900">{call.manager_info.name}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Email:</span>
                    <span className="font-medium text-gray-900">{call.manager_info.email}</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-gray-600">Аватар:</span>
                    <div className="flex items-center space-x-2">
                      {call.manager_info.avatar.startsWith('http') ? (
                        <img src={call.manager_info.avatar} alt="Avatar" className="w-8 h-8 rounded-full" />
                      ) : (
                        <div className="w-8 h-8 bg-gray-900 text-white rounded-full flex items-center justify-center text-xs font-medium">
                          {call.manager_info.avatar}
                        </div>
                      )}
                      <span className="font-medium text-gray-900">{call.manager_info.avatar}</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Информация о клиенте */}
              <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <DocumentTextIcon className="h-5 w-5 mr-2 text-purple-600" />
                  Клиент
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Название:</span>
                    <span className="font-medium text-gray-900">{call.client_info.name}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Компания:</span>
                    <span className="font-medium text-gray-900">{call.client_info.company}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Email:</span>
                    <span className="font-medium text-blue-600">{call.client_info.email}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Телефон:</span>
                    <span className="font-medium text-gray-900">{call.client_info.phone}</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Правая колонка - Аналитика */}
            <div className="space-y-6">
              {/* CQR Оценки */}
              <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <ChartBarIcon className="h-5 w-5 mr-2 text-blue-600" />
                  CQR Оценки
                </h3>
                <div className="grid grid-cols-2 gap-3 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Приветствие:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.greeting * 100)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Речь:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.speech * 100)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Инициатива:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.initiative * 100)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Программирование:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.programming * 100)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Квалификация:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.qualification * 100)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Продукт:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.product * 100)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Проблема:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.problem * 100)}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Давление:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.press * 100)}%</span>
                  </div>
                  <div className="col-span-2 flex justify-between">
                    <span className="text-gray-600">След. шаг:</span>
                    <span className="font-medium">{Math.round(call.cqr_scores.next_step * 100)}%</span>
                  </div>
                </div>
              </div>

              {/* Метрики качества */}
              <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <Cog6ToothIcon className="h-5 w-5 mr-2 text-green-600" />
                  Метрики качества
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">CQR общий:</span>
                    <span className="font-bold text-green-600">{call.quality_metrics.cqr_total_weighted_percent}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Качество ответов:</span>
                    <span className="font-medium">{call.quality_metrics.client_questions_answer_quality_percent}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Работа с возражениями:</span>
                    <span className="font-medium">{call.quality_metrics.objections_handling_quality_percent}%</span>
                  </div>
                </div>
              </div>

              {/* Анализ звонка */}
              <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <EyeIcon className="h-5 w-5 mr-2 text-yellow-600" />
                  Анализ звонка
                </h3>
                <div className="space-y-3 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Теплота клиента:</span>
                    <span className="font-medium capitalize">{call.analysis_data.client_warmth}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Тип звонка:</span>
                    <span className="font-medium">{call.analysis_data.call_type}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Конкуренты упомянуты:</span>
                    <span className="font-medium">{call.analysis_data.competitors_mentioned}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Количество вопросов:</span>
                    <span className="font-medium">{call.analysis_data.client_questions_count}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Количество возражений:</span>
                    <span className="font-medium">{call.analysis_data.client_objections_count}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Количество болей:</span>
                    <span className="font-medium">{call.analysis_data.client_pains_count}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Упомянуто продуктов:</span>
                    <span className="font-medium">{call.analysis_data.mentioned_products_count}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Вероятность успеха:</span>
                    <span className="font-bold text-blue-600">{call.analysis_data.success_probability}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Приоритет:</span>
                    <span className="font-medium">{call.analysis_data.next_best_action_priority}</span>
                  </div>
                </div>
              </div>

              {/* Стандарты коммуникации */}
              <div className="bg-white border border-gray-200 rounded-xl p-4 shadow-sm">
                <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                  <BellIcon className="h-5 w-5 mr-2 text-red-600" />
                  Стандарты коммуникации
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Ненормативная лексика:</span>
                    <span className={`font-medium ${call.communication_standards.obscenities ? 'text-red-600' : 'text-green-600'}`}>
                      {call.communication_standards.obscenities ? 'Есть' : 'Нет'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Обращение на "ты":</span>
                    <span className={`font-medium ${call.communication_standards.first_name_basis ? 'text-yellow-600' : 'text-green-600'}`}>
                      {call.communication_standards.first_name_basis ? 'Есть' : 'Нет'}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Шутки:</span>
                    <span className={`font-medium ${call.communication_standards.jokes ? 'text-blue-600' : 'text-gray-600'}`}>
                      {call.communication_standards.jokes ? 'Есть' : 'Нет'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex justify-end items-center gap-3 p-6 border-t border-gray-200 bg-gray-50">
          <button
            onClick={onClose}
            className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:border-gray-400 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500"
          >
            Закрыть
          </button>
        </div>
      </div>
    </div>
  );
};

export default function CallsPage() {
  const router = useRouter();
  
  // Фильтры с localStorage
  const [searchQuery, setSearchQuery] = useLocalStorage('calls-search-query', '');
  const [dateFilter, setDateFilter] = useLocalStorage('calls-date-filter', 'all');
  const [statusFilter, setStatusFilter] = useLocalStorage('calls-status-filter', 'all');
  const [currentPage, setCurrentPage] = useState(1);
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  const [showColumnControl, setShowColumnControl] = useState(false);
  const [tableColumns, setTableColumns] = useLocalStorage('calls-table-columns', ALL_TABLE_COLUMNS);
  const [selectedCall, setSelectedCall] = useState<ExtendedCallRecord | null>(null);
  const [showCallDetails, setShowCallDetails] = useState(false);
  const itemsPerPage = 25;

  const [advancedFilters, setAdvancedFilters] = useLocalStorage<FilterState>('calls-advanced-filters', {
    dateRange: 'all',
    status: 'all',
    clientWarmth: 'all',
    callType: 'all',
    cqrScoreRange: [0, 100],
    competitorsMentioned: 'all',
    communicationIssues: [],
    questionsCount: 'all',
    objectionsCount: 'all',
    successProbability: 'all',
    priority: 'all',
  });

  // Получаем только видимые колонки
  const visibleColumns = useMemo(() => {
    return tableColumns.filter(col => col.visible);
  }, [tableColumns]);

  const dateOptions = [
    { value: 'today', label: 'Сегодня' },
    { value: 'last7days', label: 'Последние 7 дней' },
    { value: 'last30days', label: 'Последние 30 дней' },
  ];

  const statusOptions = [
    { value: 'Завершено', label: 'Завершено' },
    { value: 'Возврат', label: 'Возврат' },
    { value: 'Отменено', label: 'Отменено' },
  ];

  // Функция для проверки диапазонов
  const isInRange = (value: number, min: number, max: number) => {
    return value >= min && value <= max;
  };

  // Функция для проверки количества
  const matchesCount = (count: number, filter: string) => {
    if (filter === 'all') return true;
    if (filter === '0') return count === 0;
    if (filter === '1-2') return count >= 1 && count <= 2;
    if (filter === '3-5') return count >= 3 && count <= 5;
    if (filter === '6+') return count >= 6;
    return true;
  };

  // Функция для проверки вероятности успеха
  const matchesSuccessProbability = (probability: string, filter: string) => {
    if (filter === 'all') return true;
    const numValue = parseInt(probability.replace('%', ''));
    if (filter === 'low') return numValue <= 30;
    if (filter === 'medium') return numValue > 30 && numValue <= 60;
    if (filter === 'high') return numValue > 60 && numValue <= 85;
    if (filter === 'very-high') return numValue > 85;
    return true;
  };

  const filteredCalls = useMemo(() => {
    return mockExtendedCallsData.filter((call) => {
      // Основной поиск
      const matchesSearch =
        call.call_id.toLowerCase().includes(searchQuery.toLowerCase()) ||
        call.manager_info.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        call.client_info.name.toLowerCase().includes(searchQuery.toLowerCase());

      // Базовые фильтры
      const matchesDate =
        dateFilter === 'all' ||
        (dateFilter === 'today' && format(parseISO(call.date), 'yyyy-MM-dd') === format(new Date(), 'yyyy-MM-dd')) ||
        (dateFilter === 'last7days' &&
          parseISO(call.date) >= new Date(new Date().setDate(new Date().getDate() - 7))) ||
        (dateFilter === 'last30days' &&
          parseISO(call.date) >= new Date(new Date().setDate(new Date().getDate() - 30)));

      const matchesStatus = statusFilter === 'all' || call.status === statusFilter;

      // Продвинутые фильтры
      const matchesClientWarmth = advancedFilters.clientWarmth === 'all' || call.analysis_data.client_warmth === advancedFilters.clientWarmth;
      
      const matchesCallType = advancedFilters.callType === 'all' || call.analysis_data.call_type.toLowerCase().includes(advancedFilters.callType.toLowerCase());
      
      const matchesCQRScore = isInRange(
        call.quality_metrics.cqr_total_weighted_percent,
        advancedFilters.cqrScoreRange[0],
        advancedFilters.cqrScoreRange[1]
      );
      
      const matchesCompetitors = advancedFilters.competitorsMentioned === 'all' || call.analysis_data.competitors_mentioned === advancedFilters.competitorsMentioned;
      
      const matchesQuestionsCount = matchesCount(call.analysis_data.client_questions_count, advancedFilters.questionsCount);
      
      const matchesObjectionsCount = matchesCount(call.analysis_data.client_objections_count, advancedFilters.objectionsCount);
      
      const matchesSuccessProb = matchesSuccessProbability(call.analysis_data.success_probability, advancedFilters.successProbability);
      
      const matchesPriority = advancedFilters.priority === 'all' || call.analysis_data.next_best_action_priority === advancedFilters.priority;

      // Проверка проблем коммуникации
      const matchesCommunicationIssues = advancedFilters.communicationIssues.length === 0 || advancedFilters.communicationIssues.every(issue => {
        switch (issue) {
          case 'obscenities':
            return call.communication_standards.obscenities;
          case 'first_name_basis':
            return call.communication_standards.first_name_basis;
          case 'jokes':
            return call.communication_standards.jokes;
          default:
            return true;
        }
      });

      return matchesSearch && matchesDate && matchesStatus && matchesClientWarmth && 
             matchesCallType && matchesCQRScore && matchesCompetitors && 
             matchesQuestionsCount && matchesObjectionsCount && matchesSuccessProb && 
             matchesPriority && matchesCommunicationIssues;
    });
  }, [searchQuery, dateFilter, statusFilter, advancedFilters]);

  const totalPages = Math.ceil(filteredCalls.length / itemsPerPage);
  const currentCalls = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return filteredCalls.slice(startIndex, startIndex + itemsPerPage);
  }, [filteredCalls, currentPage, itemsPerPage]);

  const handleRowClick = (callId: string) => {
    const call = filteredCalls.find(c => c.call_id === callId);
    if (call) {
      setSelectedCall(call);
      setShowCallDetails(true);
    }
  };

  // Функция для обновления размера колонки
  const handleColumnResize = (columnKey: string, newWidth: number) => {
    setTableColumns(prevColumns =>
      prevColumns.map(col =>
        col.key === columnKey ? { ...col, width: newWidth } : col
      )
    );
  };

  // Функция для рендеринга содержимого ячейки
  const renderCellContent = (column: TableColumn, call: ExtendedCallRecord) => {
    switch (column.key) {
      case 'call_id':
        return <span className="font-medium text-gray-900">{call.call_id}</span>;
      
      case 'manager':
        return (
          <div className="flex items-center">
            <div className="flex-shrink-0 h-10 w-10 rounded-full border-2 border-gray-200 bg-gray-100 flex items-center justify-center">
              {call.manager_info.avatar.startsWith('http') ? (
                <img
                  className="h-full w-full object-cover rounded-full"
                  src={call.manager_info.avatar}
                  alt={call.manager_info.name}
                />
              ) : (
                <span className="text-sm font-semibold text-gray-700">
                  {call.manager_info.avatar}
                </span>
              )}
            </div>
            <div className="ml-3">
              <div className="text-sm font-medium text-gray-900">{call.manager_info.name}</div>
              <div className="text-sm text-gray-500">{call.manager_info.email}</div>
            </div>
          </div>
        );
      
      case 'client':
        return (
          <div>
            <div className="text-sm font-medium text-gray-900">{call.client_info.name}</div>
            <div className="text-sm text-gray-500">{call.client_info.company}</div>
          </div>
        );
      
      case 'date':
        return <span className="text-sm text-gray-500">{format(parseISO(call.date), 'dd.MM.yyyy', { locale: ru })}</span>;
      
      case 'duration':
        return <span className="text-sm text-gray-500 font-medium">{call.duration_minutes}:{String(Math.floor(Math.random() * 60)).padStart(2, '0')}</span>;
      
      case 'status':
        return <CallStatusBadge status={call.status} />;
      
      case 'cqr_total':
        return (
          <div className="flex items-center">
            <div className={`w-3 h-3 rounded-full mr-2 ${
              call.quality_metrics.cqr_total_weighted_percent >= 80 
                ? 'bg-green-500' 
                : call.quality_metrics.cqr_total_weighted_percent >= 60 
                ? 'bg-yellow-500' 
                : 'bg-red-500'
            }`}></div>
            <span className="text-sm font-semibold text-gray-900">
              {call.quality_metrics.cqr_total_weighted_percent}%
            </span>
          </div>
        );
      
      case 'client_warmth':
        return (
          <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${
            call.analysis_data.client_warmth === 'горячий' 
              ? 'bg-red-50 text-red-700' 
              : call.analysis_data.client_warmth === 'теплый' 
              ? 'bg-yellow-50 text-yellow-700' 
              : 'bg-blue-50 text-blue-700'
          }`}>
            {call.analysis_data.client_warmth}
          </span>
        );

      // CQR оценки
      case 'cqr_greeting':
        return <span className="text-sm font-medium">{(call.cqr_scores.greeting * 100).toFixed(0)}%</span>;
      case 'cqr_speech':
        return <span className="text-sm font-medium">{(call.cqr_scores.speech * 100).toFixed(0)}%</span>;
      case 'cqr_initiative':
        return <span className="text-sm font-medium">{(call.cqr_scores.initiative * 100).toFixed(0)}%</span>;
      case 'cqr_programming':
        return <span className="text-sm font-medium">{(call.cqr_scores.programming * 100).toFixed(0)}%</span>;
      case 'cqr_qualification':
        return <span className="text-sm font-medium">{(call.cqr_scores.qualification * 100).toFixed(0)}%</span>;
      case 'cqr_product':
        return <span className="text-sm font-medium">{(call.cqr_scores.product * 100).toFixed(0)}%</span>;
      case 'cqr_problem':
        return <span className="text-sm font-medium">{(call.cqr_scores.problem * 100).toFixed(0)}%</span>;
      case 'cqr_press':
        return <span className="text-sm font-medium">{(call.cqr_scores.press * 100).toFixed(0)}%</span>;
      case 'cqr_next_step':
        return <span className="text-sm font-medium">{(call.cqr_scores.next_step * 100).toFixed(0)}%</span>;

      // Анализы
      case 'call_type':
        return <span className="text-sm text-gray-600">{call.analysis_data.call_type}</span>;
      case 'competitors':
        return (
          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
            call.analysis_data.competitors_mentioned === 'да' ? 'bg-orange-50 text-orange-700' : 'bg-gray-50 text-gray-700'
          }`}>
            {call.analysis_data.competitors_mentioned}
          </span>
        );
      case 'questions_count':
        return <span className="text-sm text-gray-700">{call.analysis_data.client_questions_count}</span>;
      case 'objections_count':
        return <span className="text-sm text-gray-700">{call.analysis_data.client_objections_count}</span>;
      case 'pains_count':
        return <span className="text-sm text-gray-700">{call.analysis_data.client_pains_count}</span>;
      case 'products_count':
        return <span className="text-sm text-gray-700">{call.analysis_data.mentioned_products_count}</span>;
      case 'success_probability':
        return <span className="text-sm font-medium text-gray-900">{call.analysis_data.success_probability}</span>;
      case 'priority':
        return (
          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
            call.analysis_data.next_best_action_priority === 'Очень высокий' ? 'bg-red-50 text-red-700' :
            call.analysis_data.next_best_action_priority === 'Высокий' ? 'bg-orange-50 text-orange-700' :
            call.analysis_data.next_best_action_priority === 'Средний' ? 'bg-yellow-50 text-yellow-700' :
            'bg-gray-50 text-gray-700'
          }`}>
            {call.analysis_data.next_best_action_priority}
          </span>
        );

      // Метрики
      case 'questions_quality':
        return <span className="text-sm font-medium">{call.quality_metrics.client_questions_answer_quality_percent}%</span>;
      case 'objections_quality':
        return <span className="text-sm font-medium">{call.quality_metrics.objections_handling_quality_percent}%</span>;

      // Стандарты коммуникации
      case 'obscenities':
        return (
          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
            call.communication_standards.obscenities ? 'bg-red-50 text-red-700' : 'bg-green-50 text-green-700'
          }`}>
            {call.communication_standards.obscenities ? 'Да' : 'Нет'}
          </span>
        );
      case 'first_name_basis':
        return (
          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
            call.communication_standards.first_name_basis ? 'bg-yellow-50 text-yellow-700' : 'bg-green-50 text-green-700'
          }`}>
            {call.communication_standards.first_name_basis ? 'Да' : 'Нет'}
          </span>
        );
      case 'jokes':
        return (
          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
            call.communication_standards.jokes ? 'bg-blue-50 text-blue-700' : 'bg-gray-50 text-gray-700'
          }`}>
            {call.communication_standards.jokes ? 'Да' : 'Нет'}
          </span>
        );

      default:
        return <span className="text-sm text-gray-500">-</span>;
    }
  };

  return (
    <>
    <EnhancedMinimalLayout>
      <div className="flex flex-col h-full">
        {/* ФИКСИРОВАННЫЙ HEADER с фильтрами */}
        <div className="sticky top-0 z-40 bg-white border-b border-gray-100 shadow-sm">
          <div className="relative">
            <div className="flex flex-col lg:flex-row items-center justify-between p-6 space-y-4 lg:space-y-0 lg:space-x-6">
              <div className="relative w-full lg:w-96">
                <MagnifyingGlassIcon className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Поиск по ID, клиенту или менеджеру..."
                  className="w-full pl-12 pr-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-transparent text-sm bg-gray-50"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </div>

              <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-3 w-full lg:w-auto">
                <div className="min-w-0">
                  <EnhancedDropdown
                    value={dateFilter}
                    onChange={setDateFilter}
                    options={dateOptions}
                    placeholder="Дата: Все"
                    icon={CalendarDaysIcon}
                  />
                </div>

                <div className="min-w-0">
                  <EnhancedDropdown
                    value={statusFilter}
                    onChange={setStatusFilter}
                    options={statusOptions}
                    placeholder="Статус: Все"
                  />
                </div>

                <button 
                  onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
                  className={`inline-flex items-center px-4 py-3 border rounded-xl transition-colors font-medium whitespace-nowrap ${
                    showAdvancedFilters 
                      ? 'border-gray-900 bg-gray-900 text-white' 
                      : 'border-gray-200 text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <FunnelIcon className="h-5 w-5 mr-2" />
                  Фильтры
                  {Object.values(advancedFilters).some(value => 
                    Array.isArray(value) ? value.length > 0 : value !== 'all' && value !== 'Все' && !(Array.isArray(value) && value[0] === 0 && value[1] === 100)
                  ) && (
                    <span className="ml-2 w-2 h-2 bg-red-500 rounded-full"></span>
                  )}
                </button>

                <button 
                  onClick={() => setShowColumnControl(!showColumnControl)}
                  className={`inline-flex items-center px-4 py-3 border rounded-xl transition-colors font-medium whitespace-nowrap ${
                    showColumnControl 
                      ? 'border-gray-900 bg-gray-900 text-white' 
                      : 'border-gray-200 text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <AdjustmentsHorizontalIcon className="h-5 w-5 mr-2" />
                  Колонки
                  <span className="ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full">
                    {visibleColumns.length}
                  </span>
                </button>
              </div>
            </div>

            {/* Продвинутые фильтры */}
            <AdvancedFiltersPanel
              isOpen={showAdvancedFilters}
              onClose={() => setShowAdvancedFilters(false)}
              filters={advancedFilters}
              onFiltersChange={setAdvancedFilters}
            />

            {/* Управление колонками */}
            <ColumnControlPanel
              isOpen={showColumnControl}
              onClose={() => setShowColumnControl(false)}
              columns={tableColumns}
              onColumnsChange={setTableColumns}
            />
          </div>
        </div>

        {/* ТАБЛИЦА с правильно настроенным скроллом */}
        <div className="flex-1 bg-white border border-gray-200 rounded-lg flex flex-col">
          <div 
            id="table-container"
            className="ultimate-scrollbars force-visible-scrollbars flex-1"
            style={{ 
              height: 'calc(100vh - 320px)', // Еще больше уменьшили отступ
              minHeight: '400px',
              maxHeight: 'calc(100vh - 320px)',
              overflow: 'auto', // Показывать скроллбары только при необходимости
              overflowX: 'auto',
              overflowY: 'auto',
              scrollbarWidth: 'auto',
              border: '2px solid #e5e7eb',
              // Принудительные стили для Chrome
              WebkitOverflowScrolling: 'touch'
            }}
          >
            <table className="w-full divide-y divide-gray-200">
              <thead className="bg-gray-50 sticky top-0 z-20">
                <tr>
                  {visibleColumns.map((column) => (
                    <ResizableColumnHeader
                      key={column.key}
                      column={column}
                      onResize={handleColumnResize}
                    />
                  ))}
                  <th className="relative px-2 py-2 w-20 bg-gray-50 border-r border-gray-200">
                    <span className="sr-only">Действия</span>
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-100">
                {currentCalls.map((call, index) => (
                  <motion.tr
                    key={call.call_id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.2, delay: index * 0.05 }}
                    className="group hover:bg-gray-50 cursor-pointer transition-colors"
                    onClick={() => handleRowClick(call.call_id)}
                  >
                    {visibleColumns.map((column) => (
                      <td
                        key={column.key}
                        className="px-4 py-3 whitespace-nowrap text-sm border-r border-gray-100 last:border-r-0 overflow-hidden"
                        style={{ 
                          width: `${column.width || 120}px`, 
                          minWidth: `${column.width || 120}px`,
                          maxWidth: `${column.width || 120}px`
                        }}
                      >
                        <div className="truncate">
                          {renderCellContent(column, call)}
                        </div>
                      </td>
                    ))}
                    <td className="px-2 py-3 whitespace-nowrap text-center text-sm font-medium">
                      <div className="flex items-center justify-center space-x-1">
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleRowClick(call.call_id);
                          }}
                          className="text-gray-400 hover:text-gray-700 p-2 rounded-md border border-transparent hover:border-gray-300 transition-all duration-200 cursor-pointer"
                          title="Посмотреть детали"
                        >
                          <EyeIcon className="h-5 w-5" />
                        </button>
                        <button
                          onClick={(e) => e.stopPropagation()}
                          className="text-gray-400 hover:text-gray-700 p-2 rounded-md border border-transparent hover:border-gray-300 transition-all duration-200 cursor-pointer"
                          title="Опции"
                        >
                          <EllipsisHorizontalIcon className="h-5 w-5" />
                        </button>
                      </div>
                    </td>
                  </motion.tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Enhanced Pagination - Зафиксированная снизу */}
        <div className="flex-shrink-0 flex items-center justify-between px-8 py-6 border-t border-gray-100 bg-white">
          <div className="text-sm text-gray-600 font-medium">
            Показано {Math.min((currentPage - 1) * itemsPerPage + 1, filteredCalls.length)}-
            {Math.min(currentPage * itemsPerPage, filteredCalls.length)} из {filteredCalls.length} записей
          </div>
          <nav className="flex items-center space-x-1" aria-label="Pagination">
            <button
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-3 py-2 rounded-lg border border-gray-200 bg-white text-sm font-medium text-gray-600 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <span className="sr-only">Предыдущая</span>
              <ChevronLeftIcon className="h-4 w-4" aria-hidden="true" />
            </button>
            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => i + 1).map((page) => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium transition-colors rounded-lg ${
                  currentPage === page
                    ? 'z-10 bg-gray-900 text-white border-gray-900 shadow-sm'
                    : 'bg-white text-gray-700 border-gray-200 hover:bg-gray-50'
                }`}
              >
                {page}
              </button>
            ))}
            {totalPages > 5 && (
              <>
                <span className="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500">
                  ...
                </span>
                <button
                  onClick={() => setCurrentPage(totalPages)}
                  className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium transition-colors rounded-lg ${
                    currentPage === totalPages
                      ? 'z-10 bg-gray-900 text-white border-gray-900 shadow-sm'
                      : 'bg-white text-gray-700 border-gray-200 hover:bg-gray-50'
                  }`}
                >
                  {totalPages}
                </button>
              </>
            )}
            <button
              onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-3 py-2 rounded-lg border border-gray-200 bg-white text-sm font-medium text-gray-600 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <span className="sr-only">Следующая</span>
              <ChevronRightIcon className="h-4 w-4" aria-hidden="true" />
            </button>
          </nav>
        </div>
      </div>

    </EnhancedMinimalLayout>

    {/* Модальное окно с деталями звонка */}
    {showCallDetails && (
      <CallDetailsModal
        call={selectedCall}
        isOpen={showCallDetails}
        onClose={() => {
          setShowCallDetails(false);
          setSelectedCall(null);
        }}
      />
    )}
    </>
  );
}
